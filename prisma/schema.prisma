datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  username      String    @unique
  password      String
  name          String?
  bio           String?
  profilePicture     String?
  coverUrl      String?
  isCreator     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  contents      Content[]
  subscriptions Subscription[] @relation("subscriber")
  subscribers   Subscription[] @relation("creator")
  stripeCustomer StripeCustomer?
}

model Content {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  mediaType    String   // 'video' or 'image'
  mediaUrl     String
  thumbnailUrl String
  isExclusive  Boolean  @default(false)
  likes        Int      @default(0)
  views        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String   @db.ObjectId
  categories   Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds  String[] @db.ObjectId
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  contents    Content[] @relation(fields: [contentIds], references: [id])
  contentIds  String[]  @db.ObjectId
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  status               String   // 'active', 'cancelled', 'expired'
  stripeSubscriptionId String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  subscriber           User     @relation("subscriber", fields: [userId], references: [id])
  userId              String   @db.ObjectId
  creator             User     @relation("creator", fields: [creatorId], references: [id])
  creatorId           String   @db.ObjectId
}

model SubscriptionPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  interval      String   // 'month' or 'year'
  stripePriceId String   @unique
  features      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StripeCustomer {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  stripeCustomerId String @unique
  
  // Relations
  user            User   @relation(fields: [userId], references: [id])
  userId          String @unique @db.ObjectId
}