import { Request, Response, Router, NextFunction, RequestHandler } from 'express';
import { User as SharedUser } from '../../shared/types';
import multer from 'multer';
import path from 'path';

// Import auth middleware
import authMiddleware from '../../auth/server/middlewares/auth';

// Import controllers
import * as userController from '../controllers/userController';

// Types for user updates
interface UserUpdates {
  name?: string;
  email?: string;
  bio?: string;
  avatar?: string;
  displayName?: string;
  profilePicture?: string;
  coverPhoto?: string;
}

// Extend Express Request type to include our custom properties
declare global {
  namespace Express {
    interface Request {
      user?: SharedUser;
      file?: Express.Multer.File;
    }
  }
}

// Alias for better semantic meaning
type AuthenticatedRequest = Request & {
  user: SharedUser;
};

// Set up multer config for memory upload
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB max
    fields: 1,
    files: 1,
  },
  fileFilter: (_req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    const ext = path.extname(file.originalname).toLowerCase();
    const validExt = ['.jpg', '.jpeg', '.png', '.webp'];

    if (allowedTypes.includes(file.mimetype) && validExt.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only JPEG, JPG, PNG, and WebP images are allowed.'));
    }
  },
});

const router = Router();

// Authentication middleware wrapper
const authenticate: RequestHandler = (req, res, next) => {
  const authHandler = authMiddleware.auth();
  return authHandler(req, res, (err?: any) => {
    if (err) {
      return res.status(401).json({ 
        success: false,
        message: 'Authentication failed',
        error: err.message 
      });
    }
    next();
  });
};

// Ownership check middleware
const checkOwnership: RequestHandler = (req: Request, res, next) => {
  const { username } = req.params;
  const authReq = req as AuthenticatedRequest;
  
  if (!authReq.user) {
    return res.status(401).json({
      success: false,
      message: 'Authentication required',
    });
  }

  if (authReq.user.username !== username) {
    return res.status(403).json({
      success: false,
      message: 'You do not have permission to perform this action',
    });
  }

  next();
};

// Redirect to authenticated user's profile
router.get('/me', authenticate, (req: Request, res: Response) => {
  const authReq = req as AuthenticatedRequest;
  if (!authReq.user) {
    return res.status(401).json({
      success: false,
      message: 'User must be logged in to view profile',
    });
  }
  
  const username = authReq.user.username;
  res.redirect(`/api/users/${username}`);
});

// Public profile and stats
router.get('/:username', userController.getUserProfile);
router.get('/:username/stats', userController.getUserStats);

// Protected routes (require authentication and ownership)
router.put(
  '/:username',
  authenticate,
  checkOwnership,
  userController.updateUserProfile
);

router.delete(
  '/:username',
  authenticate,
  checkOwnership,
  userController.deleteUser
);

// Upload profile picture
router.post(
  '/:username/picture',
  authenticate,
  checkOwnership,
  upload.single('profilePicture'),
  userController.uploadProfilePicture
);

// Upload cover photo
router.post(
  '/:username/cover',
  authenticate,
  checkOwnership,
  upload.single('coverPhoto'),
  userController.uploadCoverPhoto
);

// Update profile info
router.patch(
  '/:username',
  authenticate,
  checkOwnership,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const { username } = req.params;
      const updates: UserUpdates = req.body;

      // Input validation
      if (!username || typeof username !== 'string') {
        console.warn('Invalid username in patch request', { username });
        res.status(400).json({ success: false, error: 'Invalid username parameter' });
        return;
      }

      if (!updates || Object.keys(updates).length === 0) {
        console.warn('No updates provided in patch request', { username });
        res.status(400).json({ success: false, error: 'No updates provided' });
        return;
      }

      // Validate update fields
      const allowedUpdates = ['name', 'email', 'bio', 'avatar', 'displayName', 'profilePicture', 'coverPhoto'];
      const isValidOperation = Object.keys(updates).every(update =>
        allowedUpdates.includes(update)
      );

      if (!isValidOperation) {
        console.warn('Invalid update fields', { username, updates });
        res.status(400).json({ success: false, error: 'Invalid updates' });
        return;
      }

      // Call the controller to handle the update
      req.body = updates; // Replace body with just the updates
      await userController.updateUserProfile(req as Request, res);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error updating user profile:', errorMessage);

      res.status(500).json({
        success: false,
        error: 'Failed to update profile',
        details: process.env.NODE_ENV === 'development' ? errorMessage : undefined,
      });
    }
  }
);

export default router;
